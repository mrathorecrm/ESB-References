package routines;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class AES256 {

	  private static String CIPHER_NAME = "AES/CBC/PKCS5PADDING"; // AES/CBC/PKCS5Padding

	  private static int CIPHER_KEY_LEN = 32; //256 bits

	  /**
	   * Encrypt data using AES Cipher (CBC) with 256 bit key
	   *
	   * @param key  - key to use should be 32 bytes long (256 bits)
	   * @param iv   - initialization vector
	   * @param data - data to encrypt
	   * @return encryptedData data in base64 encoding with iv attached at end after a :
	   */
	  public static String encrypt(String key, String iv, String data) {

	    try {
	      IvParameterSpec ivSpec = new IvParameterSpec(iv.getBytes(StandardCharsets.UTF_8));
	      SecretKeySpec secretKey = new SecretKeySpec(fixKey(key).getBytes(StandardCharsets.UTF_8), "AES");

	      Cipher cipher = Cipher.getInstance(CIPHER_NAME);
	      cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);

	      byte[] encryptedData = cipher.doFinal((data.getBytes()));

	      String encryptedDataInBase64 = Base64.getEncoder().encodeToString(encryptedData);
	      String ivInBase64 = Base64.getEncoder().encodeToString(iv.getBytes(StandardCharsets.UTF_8));

	      return encryptedDataInBase64 + ":" + ivInBase64;

	    } catch (Exception ex) {
	      throw new RuntimeException(ex);
	    }
	  }

	  private static String fixKey(String key) {

	    if (key.length() < CIPHER_KEY_LEN) {
	      int numPad = CIPHER_KEY_LEN - key.length();

	      for (int i = 0; i < numPad; i++) {
	        key += "0"; //0 pad to len 32 bytes
	      }
	      return key;
	    }

	    if (key.length() > CIPHER_KEY_LEN) {
	      return key.substring(0, CIPHER_KEY_LEN); //truncate to 32 bytes
	    }
	    return key;
	  }

	  /**
	   * Decrypt data using AES Cipher (CBC) with 256 bit key
	   *
	   * @param key  - key to use should be 32 bytes long (256 bits)
	   * @param data - encrypted data with iv at the end separate by :
	   * @return decrypted data string
	   */

	  public static String decrypt(String key, String data) {

	    try {
	      String[] parts = data.split(":");

	      IvParameterSpec iv = new IvParameterSpec(Base64.getDecoder().decode(parts[1]));
	      SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES");

	      Cipher cipher = Cipher.getInstance(CIPHER_NAME);
	      cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);

	      byte[] decodedEncryptedData = Base64.getDecoder().decode(parts[0]);

	      byte[] original = cipher.doFinal(decodedEncryptedData);

	      return new String(original);
	    } catch (Exception ex) {
	      throw new RuntimeException(ex);
	    }
	  }

	  public static void main(String args) {

	    String key = "@NcRfUjXn2r5u8x!A%D*G-KaPdSgVkYp"; // 256 bit key
	    String initVector = "dynamic@dynamic@"; // 16 bytes IV, it is recommended to use a different random IV for every message!

	    String plain_text = "plain text";
	    String encrypted = encrypt(key, initVector, plain_text);
	    System.out.println(encrypted);

	    String decrypt = decrypt(key, encrypted);
	    System.out.println(decrypt);
	  }
}